generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model DungeonMaster {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  userId    String
  sessions  Session[]
}

model Session {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  date            DateTime
  duration        Int?
  imageUrl        String?
  createdAt       DateTime      @default(now())
  dmId            Int
  userId          String
  maxParticipants Int           @default(5)
  bookings        Booking[]
  waitlist        Waitlist[]
  dm              DungeonMaster @relation(fields: [dmId], references: [id])
  user            Profile       @relation("ProfileSessions", fields: [userId], references: [id])
  reviews         Review[]
  game            String? // e.g., "D&D 5e", "Pathfinder", "Call of Cthulhu"
  genre           String? // e.g., "Fantasy", "Horror", "Sci-Fi"
  experienceLevel String? // e.g., "Beginner", "Intermediate", "Advanced"
  tags            Tag[]         @relation("SessionTags")
  status          String        @default("upcoming") // "upcoming", "in-progress", "completed", "cancelled"
  chat            Chat?         @relation("SessionChat")
}

model Profile {
  id              String         @id
  email           String         @unique
  roles           String[]       @default([])
  createdAt       DateTime       @default(now())
  avatarUrl       String?
  ratingAvg       Float          @default(0)
  ratingCount     Int            @default(0)
  description     String?        @db.VarChar(500)  // Short description/tagline
  bio            String?        @db.Text          // Longer bio/about section
  Booking         Booking[]
  sessions        Session[]      @relation("ProfileSessions")
  reviewsAuthored Review[]       @relation("ReviewAuthor")
  reviewsReceived Review[]       @relation("ReviewTarget")
  reviewReports   ReviewReport[]
  waitlist        Waitlist[]
  chatMemberships ChatMember[]
  messages        Message[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  sessionId Int
  userId    String
  createdAt DateTime @default(now())
  session   Session  @relation(fields: [sessionId], references: [id])
  user      Profile  @relation(fields: [userId], references: [id])

  @@unique([sessionId, userId])
}

model Review {
  id        Int            @id @default(autoincrement())
  rating    Int            @db.SmallInt /// 1â€“5 (enforce in API/Zod)
  comment   String?        @db.VarChar(1000)
  deleted   Boolean        @default(false)
  authorId  String
  targetId  String
  sessionId Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  author    Profile        @relation("ReviewAuthor", fields: [authorId], references: [id])
  target    Profile        @relation("ReviewTarget", fields: [targetId], references: [id])
  session   Session        @relation(fields: [sessionId], references: [id])
  reports   ReviewReport[]

  @@unique([authorId, targetId, sessionId]) /// one review per pair per session
}

model ReviewReport {
  id         Int      @id @default(autoincrement())
  reviewId   Int
  reporterId String
  reason     String?  @db.VarChar(500)
  createdAt  DateTime @default(now())
  review     Review   @relation(fields: [reviewId], references: [id])
  reporter   Profile  @relation(fields: [reporterId], references: [id])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  sessions  Session[] @relation("SessionTags")
  createdAt DateTime  @default(now())
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  sessionId Int
  userId    String
  createdAt DateTime @default(now())
  session   Session  @relation(fields: [sessionId], references: [id])
  user      Profile  @relation(fields: [userId], references: [id])

  @@unique([sessionId, userId])
}

model Chat {
  id        Int       @id @default(autoincrement())
  type      String    // "session" or "direct"
  sessionId Int?      @unique // Optional, only for session chats, must be unique for 1-1
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  session   Session?  @relation("SessionChat", fields: [sessionId], references: [id])
  members   ChatMember[]
}

model ChatMember {
  id        Int      @id @default(autoincrement())
  chatId    Int
  userId    String
  joinedAt  DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      Profile  @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  senderId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    Profile  @relation(fields: [senderId], references: [id])
}
